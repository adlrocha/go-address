// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package address

import (
	"fmt"
	"io"
	"sort"

	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = sort.Sort

var lengthBufSubnetID = []byte{130}

func (t *SubnetID) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufSubnetID); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Parent (string) (string)
	if len(t.Parent) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Parent was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Parent))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Parent)); err != nil {
		return err
	}

	// t.Actor (address.Address) (struct)
	if err := t.Actor.MarshalCBOR(w); err != nil {
		return err
	}
	return nil
}

func (t *SubnetID) UnmarshalCBOR(r io.Reader) error {
	*t = SubnetID{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Parent (string) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.Parent = string(sval)
	}
	// t.Actor (address.Address) (struct)

	{

		if err := t.Actor.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Actor: %w", err)
		}

	}
	return nil
}
